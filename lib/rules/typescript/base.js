import typescript from "@typescript-eslint/eslint-plugin";

export const typescriptBaseRules = {
  // #region TypeScript ESLint Configs

  // Override any eslint-recommended rules that conflict with TypeScript ESLint
  ...typescript.configs["eslint-recommended"].rules,

  // Bring in the strict rules and enable type checking for them
  ...typescript.configs["strict-type-checked"].rules,

  // Bring in the recommended stylistic rules and enable type checking for them
  ...typescript.configs["stylistic-type-checked"].rules,

  // #endregion

  // #region Custom Rules

  "@typescript-eslint/consistent-type-exports": "error",
  "@typescript-eslint/consistent-type-imports": "error",
  "@typescript-eslint/default-param-last": "error",
  "@typescript-eslint/explicit-function-return-type": "warn",
  "@typescript-eslint/explicit-member-accessibility": "error",
  "@typescript-eslint/member-ordering": [
    "error",
    {
      default: {
        memberTypes: [
          "signature",
          "call-signature",
          "public-static-field",
          "protected-static-field",
          "private-static-field",
          "#private-static-field",
          "public-decorated-field",
          "protected-decorated-field",
          "private-decorated-field",
          "public-instance-field",
          "protected-instance-field",
          "private-instance-field",
          "#private-instance-field",
          "public-abstract-field",
          "protected-abstract-field",
          "public-field",
          "protected-field",
          "private-field",
          "#private-field",
          "static-field",
          "instance-field",
          "abstract-field",
          "decorated-field",
          "field",
          "static-initialization",
          "public-constructor",
          "protected-constructor",
          "private-constructor",
          "constructor",
          "public-static-get",
          "protected-static-get",
          "private-static-get",
          "#private-static-get",
          "public-decorated-get",
          "protected-decorated-get",
          "private-decorated-get",
          "public-instance-get",
          "protected-instance-get",
          "private-instance-get",
          "#private-instance-get",
          "public-abstract-get",
          "protected-abstract-get",
          "public-get",
          "protected-get",
          "private-get",
          "#private-get",
          "static-get",
          "instance-get",
          "abstract-get",
          "decorated-get",
          "get",
          "public-static-set",
          "protected-static-set",
          "private-static-set",
          "#private-static-set",
          "public-decorated-set",
          "protected-decorated-set",
          "private-decorated-set",
          "public-instance-set",
          "protected-instance-set",
          "private-instance-set",
          "#private-instance-set",
          "public-abstract-set",
          "protected-abstract-set",
          "public-set",
          "protected-set",
          "private-set",
          "#private-set",
          "static-set",
          "instance-set",
          "abstract-set",
          "decorated-set",
          "set",
          "public-static-method",
          "protected-static-method",
          "private-static-method",
          "#private-static-method",
          "public-decorated-method",
          "protected-decorated-method",
          "private-decorated-method",
          "public-instance-method",
          "protected-instance-method",
          "private-instance-method",
          "#private-instance-method",
          "public-abstract-method",
          "protected-abstract-method",
          "public-method",
          "protected-method",
          "private-method",
          "#private-method",
          "static-method",
          "instance-method",
          "abstract-method",
          "decorated-method",
          "method"
        ],
        order: "alphabetically"
      }
    }
  ],
  "@typescript-eslint/method-signature-style": "error",
  "@typescript-eslint/naming-convention": "error",
  "@typescript-eslint/no-loop-func": "warn",
  "@typescript-eslint/no-require-imports": "error",
  "@typescript-eslint/no-shadow": "warn",
  "@typescript-eslint/no-unnecessary-qualifier": "error",
  "@typescript-eslint/prefer-regexp-exec": "warn",
  "@typescript-eslint/promise-function-async": "error",
  "@typescript-eslint/require-array-sort-compare": "error",
  "@typescript-eslint/switch-exhaustiveness-check": "error"

  // #endregion
};
